From 85ac1add51a6802768a75b4df85914842a91551c Mon Sep 17 00:00:00 2001
From: MrKepzie <immarespond>
Date: Mon, 30 Jun 2014 13:16:03 +0200
Subject: [PATCH] Fix big misusage of QApplication

---
 Engine/AppManager.cpp         | 4 ++--
 Engine/AppManager.h           | 4 ++--
 Gui/GuiApplicationManager.cpp | 4 ++--
 Gui/GuiApplicationManager.h   | 2 +-
 Gui/ViewerGL.cpp              | 7 ++++++-
 Tests/BaseTest.cpp            | 3 ++-
 6 files changed, 15 insertions(+), 9 deletions(-)

diff --git a/Engine/AppManager.cpp b/Engine/AppManager.cpp
index 0ff5595..854815e 100644
--- a/Engine/AppManager.cpp
+++ b/Engine/AppManager.cpp
@@ -208,7 +208,7 @@ AppManager::AppManager()
     
 }
 
-bool AppManager::load(int argc, char *argv[],const QString& projectFilename,const QStringList& writers,const QString& mainProcessServerName) {
+bool AppManager::load(int &argc, char *argv[],const QString& projectFilename,const QStringList& writers,const QString& mainProcessServerName) {
     
     ///if the user didn't specify launch arguments (e.g unit testing)
     ///find out the binary path
@@ -279,7 +279,7 @@ void AppManager::quit(AppInstance* instance)
 }
 
 
-void AppManager::initializeQApp(int argc,char* argv[]) {
+void AppManager::initializeQApp(int &argc, char **argv) {
     new QCoreApplication(argc,argv);
 }
 
diff --git a/Engine/AppManager.h b/Engine/AppManager.h
index 984d15b..9877ba6 100644
--- a/Engine/AppManager.h
+++ b/Engine/AppManager.h
@@ -96,7 +96,7 @@ class AppManager : public QObject , public boost::noncopyable
      * @param mainProcessServerName The name of the main process named pipe so the background application can communicate with the
      * main process.
      **/
-    bool load(int argc, char *argv[],const QString& projectFilename = QString(),
+    bool load(int &argc, char **argv, const QString& projectFilename = QString(),
               const QStringList& writers = QStringList(),
               const QString& mainProcessServerName = QString());
 
@@ -287,7 +287,7 @@ public slots:
     
     virtual void registerGuiMetaTypes() const {}
     
-    virtual void initializeQApp(int argc,char* argv[]);
+    virtual void initializeQApp(int &argc,char** argv);
     
     virtual void onLoadCompleted() {}
 
diff --git a/Gui/GuiApplicationManager.cpp b/Gui/GuiApplicationManager.cpp
index bc680d7..1f9ba60 100644
--- a/Gui/GuiApplicationManager.cpp
+++ b/Gui/GuiApplicationManager.cpp
@@ -728,7 +728,7 @@ class Application : public QApplication
     
 public:
     
-    Application(GuiApplicationManager* app,int argc,char* argv[])
+    Application(GuiApplicationManager* app,int &argc,char** argv) ///< qapplication needs to be subclasses with reference otherwise lots of crashes will happen.
     : QApplication(argc,argv)
     , _app(app)
     {
@@ -760,7 +760,7 @@ bool Application::event(QEvent *event)
 }
 
 
-void GuiApplicationManager::initializeQApp(int argc,char* argv[]) {
+void GuiApplicationManager::initializeQApp(int &argc,char** argv) {
     QApplication* app = new Application(this,argc, argv);
 	app->setQuitOnLastWindowClosed(true);
     Q_INIT_RESOURCE(GuiResources);
diff --git a/Gui/GuiApplicationManager.h b/Gui/GuiApplicationManager.h
index da77b02..62d0d36 100644
--- a/Gui/GuiApplicationManager.h
+++ b/Gui/GuiApplicationManager.h
@@ -103,7 +103,7 @@ public slots:
     
     virtual void registerGuiMetaTypes() const OVERRIDE FINAL;
 
-    virtual void initializeQApp(int argc,char* argv[])  OVERRIDE FINAL;
+    virtual void initializeQApp(int &argc, char **argv)  OVERRIDE FINAL;
     
     void handleOpenFileRequest();
     
diff --git a/Gui/ViewerGL.cpp b/Gui/ViewerGL.cpp
index ed72e16..d0ce7f1 100644
--- a/Gui/ViewerGL.cpp
+++ b/Gui/ViewerGL.cpp
@@ -901,6 +901,11 @@ void ViewerGL::paintGL()
 {
     // always running in the main thread
     assert(qApp && qApp->thread() == QThread::currentThread());
+
+    //if app is closing, just return
+    if (!_imp->viewerTab->getGui()) {
+        return;
+    }
     glCheckError();
    
     glMatrixMode (GL_PROJECTION);
@@ -3480,4 +3485,4 @@ Natron::ViewerCompositingOperator ViewerGL::getCompositingOperator() const
 bool ViewerGL::isFrameRangeLocked() const
 {
     return _imp->viewerTab->isFrameRangeLocked();
-}
\ No newline at end of file
+}
diff --git a/Tests/BaseTest.cpp b/Tests/BaseTest.cpp
index a7c03cc..d01f615 100644
--- a/Tests/BaseTest.cpp
+++ b/Tests/BaseTest.cpp
@@ -68,7 +68,8 @@ void BaseTest::registerTestPlugins() {
 void BaseTest::SetUp()
 {
     AppManager* manager = new AppManager;
-    manager->load(0,NULL);
+    int argc = 0;
+    manager->load(argc,NULL);
     //////WARNING: This test disables multi-threading! if it fails it will never re-enable it
     ////// hence the next time you launch the application multi-threading will be DISABLED.
     manager->setNumberOfThreads(-1);
-- 
1.9.3

